Ian MacDonald Cake Manager Web Client Phase 2 Submission
========================================================

1 Requirements Analysis
=======================

The requirement for a separate web client is delivered using the Spring Boot MVC framework with Thymeleaf server-side templating.  This consumes the JSON/HAL RESTful Cake Manager Web Service which is available and documented at https://github.com/iantmacd/scot.ianmacdonald.cakemgr.rest

The choice of Spring Boot as implementation platform will also facilitate delivery of the Bonus requirements:
1. Testing using Spring Boot Test and Junit (at unit, integration and functional test level).
2. Web client user authentication via Spring Boot support for OAuth2.
3. Continuous Integration via cloud CI will be delivered by integrating the maven build into the cloud CI features on github.
4. Containerisation will be delivered using Docker, by providing a sample RESTful web service image configuration, and integrating its use into the maven build for use in local development and continuous integration.  This will include use of maven to launch a web service image for full functional testing of the RESTful web service and its web client.

2 Implementation Detail
=======================

2.1 Application
---------------

2.1.1 Java Package scot.ianmacdonald.cakemgr.restclient

Class CakeManagerClientApplication

Provides the execution entry point for the application.
Makes use of the @SpringBootApplication annotation to implement autoconfiguration and component scanning, including scanning and autowiring of Spring Boot components provided as dependencies on the maven pom.xml classpath.
Uses the @Bean notation to make a RestTemplate available to the application and configure it for conversion between the JSON/HAL of the RESTful Web Service and Java model objects handled by the Web Client.

2.1.2 Java Package scot.ianmacdonald.cakemgr.restclient.controller

Class CakeManagerClientController

The Spring MVC controller configuration for the Web Client application (uses the @Controller annotation to denote this).
Autowires a reference to its CakeService collaborator using the @Autowired annotation.
Provides a request mapping to ensure all requests are redirected to the "/cakes" endpoint.  This specifically addresses the functional requirement "By accessing the root of the server (/) it should be possible to list the cakes currently in the system. This must be presented in an acceptable format for a human to read.".
Provides an HTTP GET request mapping for the "/cakes" endpoint to query the CakeService and obtain a List<Cake> of available cakes in the DB.
Provides an HTTP POST request mapping for the "/cakes" endpoint to use the CakeService to save a new cake to the DB.
After all requests to the CakeService, marshalls the state of the model objects for the view.  This includes the list of cakes, any server error and resetting the state of the cakeForm object to be either empty or retaining its existing values (if form field validation errors have occurred).
The @Valid annotation is used to configure form field validation on the cakeForm, resulting in errors being bound to the BindingResult parameter of saveCake().
The @ModelAttribute annotation is used to change the name of the Cake form attribute from the default "cake" to "cakeForm".
In all cases requests are forwarded to the Thymeleaf view component cakes.html for server side rendering.

2.1.3 Java Package scot.ianmacdonald.cakemgr.restclient.model

Class Cake

A POJO class representing the state of a cake entity returned as JSON/HAL from the RESTful web service.
Uses the javax.validation.constraints @NotNull and @Size annotations on its private fields to configure form field validation on this object in Spring MVC.
Overridden hashCode() and equals() methods are provided, which are used by the test frameworks.

Class CakeService

A business service interface object provided to encapsulate access to the RESTful web service via RestTemplate calls.  The @Service annotation is used to indicate this adoption of design patterns and to annotate the class as an @Component which will be scanned and autowired into the CakeManagerClientController.
Uses the @Autowired annotation to configure access to the RestTemplate instance loaded as an @Bean by CakeManagerClientApplication.
Marshalls the state needed to query the RestTemplate to GET or POST Cake objects to/from the RESTful web service using JSON/HAL.
In the case of both getCakes() and saveCake() methods, handles potential error conditions including server-side errors returned from the JSON/HAL web service, and any potential errors caused by unreadable JSON/HAL responses from the web service.
Marshalls all model state, including any returned Cake or CakeServiceError objects into a CakeServiceModel object for return to the CakeManagerClientController.

Class CakeServiceError

A POJO used to represent the state of a server-side error returned in the JSON/HAL response from the RESTful web service.

Class CakeServiceModel

A wrapper POJO used to allow a combination of a List<Cake> and/or CakeServiceError to be returned from the business methods of CakeService.

2.1.4 Java Package scot.ianmacdonald.cakemgr.restclient.security

Class SecurityConfig

An @Configuration annotated class extending WebSecurityConfigurerAdapter to configure OAuth2 login delegation for the web client.
The configure() method is overridden to force initial delegation of all HTTP requests to an OAuth2 authentication server for acquisition of security credentials.
The "/logout" endpoint is also enabled, with configuration which clears the web client session state on logout.

2.1.5 View component src/main/resources/templates/cakes.html

A Thymeleaf view component used for server-side rendering of client view responses.
The page contains four sections:
1. An HTML table of the existing cakes in the system.  This uses Thymeleaf templating to render the cakeList:List<Cake> model collection returned from the RESTful web service.
2. An HTML form that allows a user to POST a new cake to the system for saving using form cakeForm:Cake.  Optionally any form field validation errors are displayed next to the input fields if attempt is made to post invalid entries to the CakeManagerClientController.
3. A section which conditionally displays any server-side error which is returned from the RESTful web service.  This is contained in the "cakeServiceError" model object.
4. An HTML form which submits a POST request to the "/logout" endpoint to trigger logout of the web client application from OAuth2.

2.1.6 src/main/resources/application.yml

Contains configuration to allow the OAuth2 SecurityConfig class to operate with a GitHub authentication server using clientId and clientSecret properties under spring.security.oauth2.client.registration.github.

2.1. Maven pom.xml

Dependency spring-boot-starter-web causes the application to be launched in a Tomcat webcontainer using Spring MVC.
Dependency spring-boot-starter-security is used to configure OAuth2 security in SecurityConfig by extending WebSecurityConfigurerAdapter.
Dependency spring-security-oauth2-client imports types required by spring-boot-starter-security.
Dependency spring-boot-starter-validation imports the annotations used for form field validation.
Dependency spring-boot-starter-hateoas imports data type and collection classes used to call the RestTemplate to access the RESTful web service and for mock testing.
Dependency spring-boot-starter-thymeleaf is required for use of Thymeleaf server-side templating in view component cakes.html
Dependency spring-boot-devtools is included to enable real-time reloading and debugging of webapplications in Spring Tools Suite.

2.2 Testing
-----------

The system is tested in slices with unit, integration and functional tests.  Mock testing and stubs are used where appropriate to isolate components for unit testing.

2.2.1 Java Package scot.ianmacdonald.cakemgr.restclient

Class CakeManagerClientApplicationTest

Unit test class which uses @SpringBootTest and @Autowired annotations to load the full application context and test that the RestTemplate, CakeManagerClientController and SecurityConfig beans are instantiated.

2.2.2 Java Package scot.ianmacdonald.cakemgr.restclient.controller

Class CakeManagerClientControllerTest

A unit/mock test which tests the Spring MVC configuration of the CakeManagerClientController by mocking its interaction with its collaborator CakeService.
The @WebMvcTest(CakeManagerClientController.class) annotation is used to load the web application context specific to the CakeManagerClientController class so that the test does not cause an embedded Tomcat server to be loaded.
The @AutoConfigureMockMvc(addFilters = false) annotation disables the OAuth2 configuration in SecurityConfig so that the test runs without the need to call out to an authentication server.
The MockMvc instance made available by @WebMvcTest is autowired into the test.
The @MockBean annotation is used to mock references to the collaborators CakeService and RestTemplate.  The RestTemplate is needed to complete the autowiring for CakeService at runtime.
A static @BeforeAll method is used to create a Mockito InOrder verifier for the mocked CakeService.
The @Test methods of the test then specify the behaviour of the mocked CakeService for specific method calls, and make mocked HTTP requests to the MockMvc object.
Test assertions are made about the value of the returned HTML content and the InOrder object is used to verify the number and order of calls to the mock CakeService.

2.2.3 Java Package scot.ianmacdonald.cakemgr.restclient.functional

Class CakeManagerClientFunctionalTest

A full functional end-to-end test of the web client which requires a new instance of the RESTful web service application to have just been started on localhost port 8081.
The test uses the @SpringBootTest annotation, with @AutoConfigureMockMvc(addFilters = false).  This means that the test runs without creating an embedded Tomcat server and disables the OAuth2 configuration in SecurityConfig, but makes HTTP calls out to the web service running on localhost:8081.
The test uses the @TestMethodOrder(OrderAnnotation.class) and @Order JUnit annotations to run the test methods in a prescibed order.  This is because when running the test remotely in a fully end-to-end fashion, it is not possible to make the test executions idempotent without repeatedly stopping and restarting the RESTful web service running in Tomcat.
An HtmlUnit WebClient is created for each @Test in an @BeforeEach method using MockMvcWebClientBuilder.  The WebClient is then used to drive the test by exercising the view component cakes.html as a user would operate the web client.

2.2.4 Java Package scot.ianmacdonald.cakemgr.restclient.integration

Class CakeManagerClientIntegrationTest

An integration/mock test which tests the Spring MVC configuration of the CakeManagerClientController and its interaction with its collaborator CakeService by mocking its collaborator RestTemplate.
The test uses @SpringBootTest with @AutoConfigureMockMvc(addFilters = false).  This means that the test runs without creating an embedded Tomcat server and disables the OAuth2 configuration in SecurityConfig.
The MockMvc instance made available by @AutoConfigureMockMvc is autowired into the test.
The @MockBean annotation is used to mock a reference to the collaborator RestTemplate.
A static @BeforeAll method is used to create a Mockito InOrder verifier for the mocked RestTemplate.
The @Test methods of the test then specify the behaviour of the mocked RestTemplate for specific method calls, and make mocked HTTP requests to the MockMvc object.
Test assertions are made about the value of the returned content, and the InOrder object is used to verify the number and order of calls to the mock RestTemplate.

2.2.5 Java Package scot.ianmacdonald.cakemgr.restclient.model

Class CakeServiceErrorTest

A plain JUnit 5 test which tests the equals() method of class CakeServiceError, including appropriate handling of null fields.

Class CakeServiceTest

A unit/mock test which tests the CakeService class by mocking its interaction with its collaborator RestTemplate.
@ExtendWith(SpringExtension.class) annotation is used to autowire the test using an @TestConfiguration to provide the CakeService instance.  This avoids the  overhead of loading the whole Spring Boot application context.
The @MockBean annotation is used to mock a reference to the collaborator RestTemplate.
A static @BeforeAll method is used to create a Mockito InOrder verifier for the mocked RestTemplate.
The @Test methods then specify the behaviour of the mocked RestTemplate for specific method calls, and exercise the methods on the autowired CakeService under test.
Test assertions are made about the content of the returned CakeServiceModel objects, and the InOrder object is used to verify the number and order of calls to the mock CakeService.

Class CakeTest

A plain JUnit 5 test which tests the equals() method of class Cake, including appropriate handling of null fields.

2.2.6 Java Package scot.ianmacdonald.cakemgr.restclient.util

Interface CakeManagerClientTestUtils

Static test data and utility methods which are reused by implementing classes CakeManagerClientControllerTest, CakeManagerClientIntegrationTest and CakeServiceTest.

2.2.7 Maven pom.xml

Dependency spring-boot-starter-test is included to enable Spring Boot test facilities.  The junit-vintage-engine dependency is excluded to facilitate the use of JUnit 5 (Jupiter) test capabilities over JUnit 4.
Dependency htmlunit imports the HtmlUnit test classes including WebClient for use in CakeManagerClientFunctionalTest.
Unit tests are launched from the build configuration using the maven-surefire-plugin, excluding all functional tests from this phase of the build.
The build configuration uses the spring-boot-maven-plugin with the io.fabric8 docker-maven-plugin to start a Docker image of the RESTful web service application in the pre-integration-test phase and then stop it in the post-integration-test phase. In between these phases, in the integration-test phase, the maven-failsafe-plugin runs CakeManagerClientFunctionalTest. This is the reason that @TestMethodOrder(OrderAnnotation.class) and @Order JUnit annotations are used to run the tests in a prescribed order, so that they can run in a non-idempotent but predictable fashion without stopping and restarting the Docker image.
The Docker image of the web service application is obtained from the local Docker repository as docker.pkg.github.com/iantmacd/scot.ianmacdonald.cakemgr.rest/cake-manager-ws:latest.

2.3 Cloud Continuous Integration Using Github Actions
-----------------------------------------------------

A github action is configured on the github server in file maven.yml.
The github action is setup to trigger a build when commits are pushed to master.
The build first performs a Docker pull of image docker.pkg.github.com/iantmacd/scot.ianmacdonald.cakemgr.rest/cake-manager-ws:latest from the GitHub Packages repository.
If this is successful, the build uses maven to run build and then unit, integration and functional test of the web client application.
Functional testing includes the use of Docker containerisation for end-to-end functional testing by the maven build, as described above.

3 Build, Execute and Exercise the Cake Manager Web Client
=========================================================

3.1 Requirements

The application is built with Java 8 version 1.8.0_281 using maven 3.6.3.
To run a full build with functional tests requires Docker to be installed and a Docker daemon to be running.  My local development environment used Docker Desktop for Mac version 3.1.0 (51484).

3.2 Build and Test

To build the application and run unit, integration and functional tests:
1. Ensure that the Docker daemon is running.
2. Download the code for the Cake Manager RESTful Web Service from https://github.com/iantmacd/scot.ianmacdonald.cakemgr.rest
3. Build and test the Cake Manager RESTful Web Service.  From the root directory of that project execute:
    mvn clean verify
    N.B. This includes a build of a Docker image of the web service as docker.pkg.github.com/iantmacd/scot.ianmacdonald.cakemgr.rest/cake-manager-ws:latest to the local Docker repository.
4. From the root directory of the Cake Manager Web Client:
    mvn clean verify
    N.B. This uses the locally available image of the web service and runs it at localhost:8081 for use by CakeManagerClientFunctionalTest.

3.3 Execute the Application

3.3.1 Execute the Cake Manager RESTful Web Service

For the Cake Manager Web Client to execute locally, first the Cake Manager RESTful Web Service must be running on localhost port 8081.

1. Download the code for the Cake Manager RESTful Web Service from https://github.com/iantmacd/scot.ianmacdonald.cakemgr.rest
2. To execute the web service with maven, from the project root directory, execute:
    mvn spring-boot:run
3. Alternatively, to run the web service as a Docker image, ensure the Docker daemon is running and then from the project root directory execute:
    mvn clean verify
   Then run the docker image of the  web service from the local docker repository:
    docker run -p 8081:8081 docker.pkg.github.com/iantmacd/scot.ianmacdonald.cakemgr.rest/cake-manager-ws

3.3.2 Execute the Cake Manager Web Client

From the Cake Manager Web Client root directory execute:
    mvn spring-boot:run
    
The Cake Manager Web Client will now be running on localhost at port 8080.

3.4 Exercise the Cake Manager Web Client

3.4.1 Login

1. Before logging in, check the local user is signed out from the github website.
2. Using a web browser, access http://localhost:8080/cakes.
    N.B. Any context path at localhost:8080 other than "/logout" should redirect to "/cakes".
3. The user will be redirected to github.com login page "Sign in to GitHub to continue to Cake Manager".
4. Enter your github username and password and click "Sign in".
5. You will be redirected to http://localhost:8080/cakes where you will see the page with title "Cake Manager: View and Create Cakes".

3.4.2 View existing cakes

1. The first section "List of Cakes that are Stored in the Database:" shows a table of the cakes, displaying their title, description and a link to the image.
2. Clicking on the image link navigates to the image for the cake (if the URL is valid).

3.4.3 Create a cake

1. In the second section "Add a Cake to the Database:", input a title, description and an image URL for a new cake and click "Add Cake".
2. If form field validation is passed and the cake title is unique, the cake is added to the DB and you are returned to the view.
3. The new cake is added to the table of cakes.
4. You can click on the link of the cake image to navigate to the new cake's image, as before.

3.4.4 Check form field validation

1. In the second section "Add a Cake to the Database:", leave any field empty or enter a single character and click "Add Cake".
2. A new cake will not be created and you will be returned to the main view.
3. Form fields will remain populated with your entries and validation errors will be displayed next to any input fields with invalid data.

3.4.5 Create a cake with duplicate title

1. As above, input details for a new cake with a duplicate title to one already displayed and click "Add Cake".
2. A new cake will not be created and you will be returned to the main view.
3. A new section of the page "An Error Was Encountered with the Cake Service:" will be displayed.
4. This will report detail of the server-side error giving rise to the error condition.

3.4.6 Logout

1. Click on the "Logout" button at the bottom of the page.
2. You will be redirected to the "Please sign in" page which shows a link to the GitHub authentication server.
3. If you remain signed in to github, clicking the "GitHub" link will reauthenticate the user and return you to the cake view page.
4. If you have signed out of github, clicking the "GitHub" link will redirect you to the github.com login page "Sign in to GitHub to continue to Cake Manager".
5. Alternatively, entering http://localhost:8080/logout in the browser (as a GET request) will redirect to the "Confirm Log Out" page.
6. Clicking "Log Out" will then issue a POST request to http://localhost:8080/logout and forward the user to the "Please sign in" page as above.
